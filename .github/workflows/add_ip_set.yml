name: Add IP to BlockList WAF

on:
  workflow_dispatch:
    inputs:
      ip:
        description: Add the IP to the block list
        required: true
        type: string
      description:
        description: Short description/reason
        required: true
        type: string

env:
  IPSET_NAME: Blocked

jobs:
  block-ip:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create the IP set
        continue-on-error: true
        run: |
          aws sts get-caller-identity
          aws wafv2 create-ip-set --name $IPSET_NAME --scope CLOUDFRONT --ip-address-version IPV4 --addresses 0.0.0.0/32 --region us-east-1
      - name: Add the IP to the IP set
        run: |
          sudo apt install jq
          echo ${{ inputs.ip }}
          ipsetDetails=$(aws wafv2 list-ip-sets --scope CLOUDFRONT --region us-east-1)
          ipsetId=$(echo $ipsetDetails | jq -r '.IPSets[0].Id')
          ipSet=$(aws wafv2 get-ip-set --name $IPSET_NAME --scope CLOUDFRONT --region us-east-1 --id $ipsetId)
          addresses=$(echo $ipSet | jq -r '.IPSet.Addresses')
          new_addresses=$(jq -n --argjson ips "$addresses" --arg new_ip "${{ inputs.ip }}/32" '{"Addresses": ($ips + [$new_ip])}')
          echo $new_addresses
          echo $new_addresses > ips.json

          lockToken=$(echo $ipSet | jq -r '.LockToken')
          aws wafv2 update-ip-set --scope CLOUDFRONT --name $IPSET_NAME --id $ipsetId --lock-token $lockToken --region us-east-1 --cli-input-json file://ips.json
        env:
          AWS_DEFAULT_REGION: us-east-1 # Replace with the AWS region where your WAF is configured
      - name: Add the IP and description to S3 bucket
        run: |
          new_ip="${{ inputs.ip }}/32"
          new_description="${{ inputs.description }}"
          aws s3api get-object --bucket ipset-waf --key ip-descriptions.json ip-descriptions.json
          json_data=$(cat ip-descriptions.json)
          existing_entries=$(echo "$json_data" | jq -c '.ip_and_description[]')
          new_entry=$(jq -n --arg ip "$new_ip" --arg desc "$new_description" '{"ip": $ip, "description": $desc}')

          if [[ "$existing_entries" ]]; then
            updated_entries="[$existing_entries, $new_entry]"
          else
            updated_entries="[$new_entry]"
          fi

          updated_json=$(echo "$json_data" | jq '.ip_and_description = '"$updated_entries")
          echo "$updated_json" > ip-descriptions.json
          aws s3 cp ip-descriptions.json s3://ipset-waf/ip-descriptions.json
