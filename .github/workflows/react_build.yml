name: WAF IPsets display
on:
  workflow_run:
    workflows: ["Add IP to BlockList WAF"]
    types:
      - completed
  # workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  CI: false
  Scope: REGIONAL

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get IPsets from WAF and S3
        run: |
          output=$(aws wafv2 list-ip-sets --scope $Scope --region us-east-1)
          blocked_id=$(echo "$output" | jq -r '.IPSets[] | select(.Name=="Blocked") | .Id')
          whitelist_id=$(echo "$output" | jq -r '.IPSets[] | select(.Name=="WhiteList") | .Id')
          blocked_github_id=$(echo "$output" | jq -r '.IPSets[] | select(.Name=="blockedGithub") | .Id')
          blocked_addresses=$(aws wafv2 get-ip-set --scope $Scope --region us-east-1 --name Blocked --id $blocked_id | jq -r '.IPSet.Addresses')
          whitelist_addresses=$(aws wafv2 get-ip-set --scope $Scope --region us-east-1 --name WhiteList --id $whitelist_id | jq -r '.IPSet.Addresses')
          blocked_github_addresses=$(aws wafv2 get-ip-set --scope $Scope --region us-east-1 --name blockedGithub --id $blocked_github_id | jq -r '.IPSet.Addresses')


          blocked_array=$(echo "$blocked_addresses" | jq -c '.[] | {ip: ., description: ""}' | paste -sd ',')
          whitelist_array=$(echo "$whitelist_addresses" | jq -c '.[] | {ip: ., description: ""}' | paste -sd ',')
          blocked_github_array=$(echo "$blocked_github_addresses" | jq -c '.[] | {ip: ., description: ""}' | paste -sd ',')

          json_output="{\"Blocked\": [$blocked_array], \"WhiteList\": [$whitelist_array], \"BlockedGithub\": [$blocked_github_array]}"
          echo $json_output > dev.json
          aws s3api get-object --bucket ipset-waf --key ip-descriptions.json ip-descriptions.json
          python merge.py
          cp -fr ips_with_descriptions.json src
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Build react app
        run: |
          echo "REACT_APP_ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN_GITHUB }} " > .env
          ls
          cat .env
          npm install --force
          npm run build

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: ./build
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
